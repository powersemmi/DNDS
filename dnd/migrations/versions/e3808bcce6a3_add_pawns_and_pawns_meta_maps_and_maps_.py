"""Add pawns and pawns_meta, maps and maps_meta,
gameset and gamesets_meta and gameset_pawns_position

Revision ID: e3808bcce6a3
Revises:
Create Date: 2023-01-18 08:26:33.967736

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e3808bcce6a3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "maps",
        sa.Column(
            "id", sa.BigInteger(), sa.Identity(always=True), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column(
            "id", sa.BigInteger(), sa.Identity(always=True), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("username", sa.String(length=256), nullable=False),
        sa.Column("full_name", sa.String(length=256), nullable=True),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", postgresql.BYTEA(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(
        op.f("ix_users_username"), "users", ["username"], unique=True
    )
    op.create_table(
        "maps_meta",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("len_x", sa.Integer(), nullable=False),
        sa.Column("len_y", sa.Integer(), nullable=False),
        sa.Column("image", postgresql.BYTEA(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["maps.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_maps_meta_id"), "maps_meta", ["id"], unique=True)
    op.create_index(
        op.f("ix_maps_meta_name"), "maps_meta", ["name"], unique=False
    )
    op.create_table(
        "pawns",
        sa.Column(
            "id", sa.BigInteger(), sa.Identity(always=True), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_pawns_user_id"), "pawns", ["user_id"], unique=False
    )
    op.create_table(
        "pawns_meta",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "color",
            sqlalchemy_utils.types.color.ColorType(length=20),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["pawns.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_pawns_meta_id"), "pawns_meta", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_pawns_meta_name"), "pawns_meta", ["name"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_pawns_meta_name"), table_name="pawns_meta")
    op.drop_index(op.f("ix_pawns_meta_id"), table_name="pawns_meta")
    op.drop_table("pawns_meta")
    op.drop_index(op.f("ix_pawns_user_id"), table_name="pawns")
    op.drop_table("pawns")
    op.drop_index(op.f("ix_maps_meta_name"), table_name="maps_meta")
    op.drop_index(op.f("ix_maps_meta_id"), table_name="maps_meta")
    op.drop_table("maps_meta")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_table("users")
    op.drop_table("maps")
    # ### end Alembic commands ###
